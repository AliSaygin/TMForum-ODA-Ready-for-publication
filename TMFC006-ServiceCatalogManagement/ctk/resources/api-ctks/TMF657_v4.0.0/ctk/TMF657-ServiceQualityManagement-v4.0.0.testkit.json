{
	"info": {
		"_postman_id": "b955a6eb-5977-49e8-8f6d-fcd55d5d2268",
		"name": "CTK-Service_Quality_Management-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/ServiceLevelObjective",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"",
									"pm.globals.set('CONFORMANCECOMPARATORSLO01', instance['conformanceComparator']);",
									"pm.globals.set('CONFORMANCETARGETSLO01', instance['conformanceTarget']);",
									"pm.globals.set('HREFSLO01', instance['href']);",
									"pm.globals.set('IDSLO01', instance['id']);",
									"",
									"pm.test('Body includes value held on conformanceComparator', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"});",
									"pm.test('Body includes value held on conformanceTarget', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"});",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"conformanceComparator\": \">\",\n    \"conformanceTarget\": \"32\",\n    \"serviceLevelObjectiveParameter\": {\n    }\n}"
						},
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							]
						},
						"description": "This operation creates a ServiceLevelObjective"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelObjective",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO02\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO02');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO02\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO02\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO02');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO02\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO02');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							]
						},
						"description": "This operation search for the created ServiceLevelObjective"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelObjective/{{IDSLO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective/{{IDSLO01}}",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							],
							"path": [
								"{{IDSLO01}}"
							]
						},
						"description": "This operation search for one of the created ServiceLevelObjective"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/ServiceLevelObjective?fields=conformanceComparator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective?fields=conformanceComparator",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							],
							"query": [
								{
									"key": "fields",
									"value": "conformanceComparator"
								}
							]
						},
						"description": "This operation filter a ServiceLevelObjective"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelObjective?conformanceComparator={{CONFORMANCECOMPARATORSLO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective?conformanceComparator={{CONFORMANCECOMPARATORSLO01}}",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							],
							"query": [
								{
									"key": "conformanceComparator",
									"value": "{{CONFORMANCECOMPARATORSLO01}}"
								}
							]
						},
						"description": "This operation filter a ServiceLevelObjective"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelObjective?fields=conformanceTarget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective?fields=conformanceTarget",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							],
							"query": [
								{
									"key": "fields",
									"value": "conformanceTarget"
								}
							]
						},
						"description": "This operation filter a ServiceLevelObjective"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelObjective?conformanceTarget={{CONFORMANCETARGETSLO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective?conformanceTarget=\"{{CONFORMANCETARGETSLO01}}\"",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							],
							"query": [
								{
									"key": "conformanceTarget",
									"value": "\"{{CONFORMANCETARGETSLO01}}\""
								}
							]
						},
						"description": "This operation filter a ServiceLevelObjective"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelObjective?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective?fields=id",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a ServiceLevelObjective"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelObjective?id={{IDSLO01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['conformanceComparator', 'conformanceTarget', 'href', 'id', 'serviceLevelObjectiveParameter'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has conformanceComparator attribute', function() { pm.expect(instance[\"conformanceComparator\"]).to.be.a('string'); });",
									"        pm.test('Response has conformanceTarget attribute', function() { pm.expect(instance[\"conformanceTarget\"]).to.be.a('string'); });",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"      ",
									"        pm.test('Body includes value held on conformanceComparator', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceComparator']);",
									"        });",
									"        pm.test('Body includes value held on conformanceTarget', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['conformanceTarget']);",
									"        });",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLO01\")) {",
									"            pm.test('conformanceComparator is ' + pm.globals.get(\"CONFORMANCECOMPARATORSLO01\"), function() {pm.expect(instance['conformanceComparator']) == pm.globals.get('CONFORMANCECOMPARATORSLO01');});",
									"            pm.test('conformanceTarget is ' + pm.globals.get(\"CONFORMANCETARGETSLO01\"), function() {pm.expect(instance['conformanceTarget']) == pm.globals.get('CONFORMANCETARGETSLO01');});",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLO01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLO01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLO01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLO01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLO02\")) {",
									"            pm.test('IDSLO02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelObjective?id={{IDSLO01}}",
							"host": [
								"{{Service_Quality_Management}}serviceLevelObjective"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDSLO01}}"
								}
							]
						},
						"description": "This operation filter a ServiceLevelObjective"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/ServiceLevelObjective/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}ServiceLevelObjective/a74e761d-4261-4b1a-80c6-53a7e8e25168",
							"host": [
								"{{Service_Quality_Management}}ServiceLevelObjective"
							],
							"path": [
								"a74e761d-4261-4b1a-80c6-53a7e8e25168"
							]
						},
						"description": "This operation search for one of the created ServiceLevelObjective"
					},
					"response": []
				}
			]
		},
		{
			"name": "N1",
			"item": [
				{
					"name": "/ServiceLevelSpecification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"",
									"pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"",
									"",
									"",
									"pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"",
									"pm.globals.set('HREFSLS01', instance['href']);",
									"pm.globals.set('IDSLS01', instance['id']);",
									"pm.globals.set('NAMESLS01', instance['name']);",
									"",
									"pm.test('Body includes value held on href', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['href']);",
									"});",
									"pm.test('Body includes value held on id', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['id']);",
									"});",
									"pm.test('Body includes value held on name', function () {",
									"  pm.expect(pm.response.text()).to.include(instance['name']);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Access bandwidth\",\n  \"relatedServiceLevelObjective\": [\n    {\n      \"id\": \"3112\"\n    },\n    {\n      \"id\": \"3113\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelSpecification",
							"host": [
								"{{Service_Quality_Management}}serviceLevelSpecification"
							]
						},
						"description": "This operation creates a ServiceLevelSpecification"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelSpecification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS02');});",
									"        }  ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS02');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS02');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS02');});",
									"        }",
									"   ",
									"  }",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelSpecification",
							"host": [
								"{{Service_Quality_Management}}serviceLevelSpecification"
							]
						},
						"description": "This operation search for the created ServiceLevelSpecification"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelSpecification/{{IDSLS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('IDSLS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('IDSLS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelSpecification/{{IDSLS01}}",
							"host": [
								"{{Service_Quality_Management}}serviceLevelSpecification"
							],
							"path": [
								"{{IDSLS01}}"
							]
						},
						"description": "This operation search for one of the created ServiceLevelSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/ServiceLevelSpecification?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelSpecification?fields=id",
							"host": [
								"{{Service_Quality_Management}}serviceLevelSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation filter a ServiceLevelSpecification"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelSpecification?id={{IDSLS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('IDSLS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('IDSLS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelSpecification?id={{IDSLS01}}",
							"host": [
								"{{Service_Quality_Management}}serviceLevelSpecification"
							],
							"query": [
								{
									"key": "id",
									"value": "{{IDSLS01}}"
								}
							]
						},
						"description": "This operation filter a ServiceLevelSpecification"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelSpecification?fields=name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelSpecification?fields=name",
							"host": [
								"{{Service_Quality_Management}}serviceLevelSpecification"
							],
							"query": [
								{
									"key": "fields",
									"value": "name"
								}
							]
						},
						"description": "This operation filter a ServiceLevelSpecification"
					},
					"response": []
				},
				{
					"name": "/ServiceLevelSpecification?name={{NAMESLS01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"  ",
									"  ",
									"  ",
									"var jsonData = pm.response.json();",
									"  ",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(function (instance, index) {",
									"      ",
									"        var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('IDSLS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"          ",
									"    });",
									"  }",
									"  else {",
									"    var instance = pm.response.json();",
									"    var requiredAttributes = ['href', 'id', 'name', 'relatedServiceLevelObjective'];",
									"      ",
									"        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
									"      ",
									"      ",
									"      ",
									"        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
									"        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
									"        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
									"        pm.test('Response has relatedServiceLevelObjective attribute', function() { pm.expect(instance[\"relatedServiceLevelObjective\"]).to.be.a('array'); });",
									"      ",
									"        pm.test('Body includes value held on href', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['href']);",
									"        });",
									"        pm.test('Body includes value held on id', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['id']);",
									"        });",
									"        pm.test('Body includes value held on name', function () {",
									"            pm.expect(pm.response.text()).to.include(instance['name']);",
									"        });",
									"        // Individualized tests",
									"        if (instance.id == pm.globals.get(\"IDSLS01\")) {",
									"            pm.test('href is ' + pm.globals.get(\"HREFSLS01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFSLS01');});",
									"            pm.test('id is ' + pm.globals.get(\"IDSLS01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDSLS01');});",
									"            pm.test('name is ' + pm.globals.get(\"NAMESLS01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMESLS01');});",
									"        }",
									"        if (instance.id == pm.globals.get(\"IDSLS02\")) {",
									"            pm.test('IDSLS02 not expected on this test', function () {",
									"                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
									"            });",
									"        }",
									"",
									"        ",
									"   ",
									"}",
									"  ",
									"  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}serviceLevelSpecification?name={{NAMESLS01}}",
							"host": [
								"{{Service_Quality_Management}}serviceLevelSpecification"
							],
							"query": [
								{
									"key": "name",
									"value": "{{NAMESLS01}}"
								}
							]
						},
						"description": "This operation filter a ServiceLevelSpecification"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/ServiceLevelSpecification/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Service_Quality_Management}}ServiceLevelSpecification/56cab0b4-bfc0-4ea8-b37a-6909e7297a91",
							"host": [
								"{{Service_Quality_Management}}ServiceLevelSpecification"
							],
							"path": [
								"56cab0b4-bfc0-4ea8-b37a-6909e7297a91"
							]
						},
						"description": "This operation search for one of the created ServiceLevelSpecification"
					},
					"response": []
				}
			]
		}
	]
}