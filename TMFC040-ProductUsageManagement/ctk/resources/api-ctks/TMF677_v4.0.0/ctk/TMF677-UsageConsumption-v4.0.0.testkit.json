{
	"info": {
		"_postman_id": "3cbfde17-5f66-4e7a-b29f-581a18c0295b",
		"name": "CTK-Usage_consumption-4.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "N1",
			"item": [
				{
					"name": "/QueryUsageConsumption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"if (Array.isArray(jsonData)) { ",
									"  ",
									"    pm.test('Array not expected as response', function (){pm.expect.fail()});",
									"  ",
									"",
									"}",
									"pm.test(\"Status code is 201 or 200\", function () {",
									"    pm.expect([201, 200]).to.include(pm.response.code)",
									"",
									"});",
									"",
									"",
									"var instance = pm.response.json();",
									"var requiredAttributes = ['usageConsumption'];",
									"var attributes = ['partyAccount', 'relatedParty']",
									"pm.test('Instance has at least one of partyAccount, relatedParty, searchCriteria mandatory attributes', function () { ",
									"    let hasOneAttribute = false",
									"    let keys = Object.keys(instance)",
									"    pm.expect(keys).to.include.members(requiredAttributes) ",
									"    attributes.forEach(attr => {",
									"        if (keys.includes(attr)){",
									"            hasOneAttribute = true",
									"            pm.test('Response has ' +  attr + ' attribute', function() { pm.expect(instance[attr]).to.be.a('array'); });",
									"        }",
									"    })",
									"    if (instance[\"searchCriteria\"]){",
									"        pm.test('Response has searchCriteria attribute', function() { pm.expect(instance[\"searchCriteria\"]).to.be.a('object'); })",
									"        hasOneAttribute = true",
									"    }",
									"    pm.expect(hasOneAttribute).to.be.true",
									"});",
									"",
									"pm.test('Response has usageConsumption attribute', function() { pm.expect(instance[\"usageConsumption\"]).to.be.a('array'); });",
									"",
									"pm.globals.set(\"IDQUC01\", instance[\"id\"])",
									"",
									"if (pm.response.code == 200){",
									"    postman.setNextRequest(\"null\")",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "getmandatory",
								"value": "true",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"relatedParty\": [\n        {\n            \"id\": \"USER11222\",\n            \"@referredType\": \"queryUsageConsumption\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{Usage_Consumption}}queryUsageConsumption",
							"host": [
								"{{Usage_Consumption}}queryUsageConsumption"
							]
						},
						"description": "This operation creates a QueryUsageConsumption"
					},
					"response": []
				},
				{
					"name": "/QueryUsageConsumption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(instance => {",
									"        var requiredAttributes = ['usageConsumption'];",
									"        var attributes = ['partyAccount', 'relatedParty']",
									"        pm.test('Instance has at least one of partyAccount, relatedParty, searchCriteria mandatory attributes', function () {",
									"            let hasOneAttribute = false",
									"            let keys = Object.keys(instance)",
									"            pm.expect(keys).to.include.members(requiredAttributes)",
									"            attributes.forEach(attr => {",
									"                if (keys.includes(attr)) {",
									"                    hasOneAttribute = true",
									"                    pm.test('Response has ' + attr + ' attribute', function () { pm.expect(instance[attr]).to.be.a('array'); });",
									"                }",
									"            })",
									"            if (instance[\"searchCriteria\"]) {",
									"                pm.test('Response has searchCriteria attribute', function () { pm.expect(instance[\"searchCriteria\"]).to.be.a('object'); })",
									"                hasOneAttribute = true",
									"            }",
									"            pm.expect(hasOneAttribute).to.be.true",
									"        });",
									"",
									"        pm.test('Response has usageConsumption attribute', function () { pm.expect(instance[\"usageConsumption\"]).to.be.a('array'); });",
									"",
									"    })",
									"}",
									"else {",
									"    var requiredAttributes = ['usageConsumption'];",
									"        var attributes = ['partyAccount', 'relatedParty']",
									"        pm.test('Instance has at least one of partyAccount, relatedParty, searchCriteria mandatory attributes', function () {",
									"            let hasOneAttribute = false",
									"            let keys = Object.keys(jsonData)",
									"            pm.expect(keys).to.include.members(requiredAttributes)",
									"            attributes.forEach(attr => {",
									"                if (keys.includes(attr)) {",
									"                    hasOneAttribute = true",
									"                    pm.test('Response has ' + attr + ' attribute', function () { pm.expect(jsonData[attr]).to.be.a('array'); });",
									"                }",
									"            })",
									"            if (jsonData[\"searchCriteria\"]) {",
									"                pm.test('Response has searchCriteria attribute', function () { pm.expect(jsonData[\"searchCriteria\"]).to.be.a('object'); })",
									"                hasOneAttribute = true",
									"            }",
									"            pm.expect(hasOneAttribute).to.be.true",
									"        });",
									"",
									"        pm.test('Response has usageConsumption attribute', function () { pm.expect(jsonData[\"usageConsumption\"]).to.be.a('array'); });",
									"",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Usage_Consumption}}queryUsageConsumption",
							"host": [
								"{{Usage_Consumption}}queryUsageConsumption"
							]
						},
						"description": "This operation search for the created QueryUsageConsumption"
					},
					"response": []
				},
				{
					"name": "/QueryUsageConsumption/{{IDQUC01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"var jsonData = pm.response.json();",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
									"    jsonData.forEach(instance => {",
									"        var requiredAttributes = ['usageConsumption'];",
									"        var attributes = ['partyAccount', 'relatedParty']",
									"        pm.test('Instance has at least one of partyAccount, relatedParty, searchCriteria mandatory attributes', function () {",
									"            let hasOneAttribute = false",
									"            let keys = Object.keys(instance)",
									"            pm.expect(keys).to.include.members(requiredAttributes)",
									"            attributes.forEach(attr => {",
									"                if (keys.includes(attr)) {",
									"                    hasOneAttribute = true",
									"                    pm.test('Response has ' + attr + ' attribute', function () { pm.expect(instance[attr]).to.be.a('array'); });",
									"                }",
									"            })",
									"            if (instance[\"searchCriteria\"]) {",
									"                pm.test('Response has searchCriteria attribute', function () { pm.expect(instance[\"searchCriteria\"]).to.be.a('object'); })",
									"                hasOneAttribute = true",
									"            }",
									"            pm.expect(hasOneAttribute).to.be.true",
									"        });",
									"",
									"        pm.test('Response has usageConsumption attribute', function () { pm.expect(instance[\"usageConsumption\"]).to.be.a('array'); });",
									"",
									"    })",
									"}",
									"else {",
									"    var requiredAttributes = ['usageConsumption'];",
									"        var attributes = ['partyAccount', 'relatedParty']",
									"        pm.test('Instance has at least one of partyAccount, relatedParty, searchCriteria mandatory attributes', function () {",
									"            let hasOneAttribute = false",
									"            let keys = Object.keys(jsonData)",
									"            pm.expect(keys).to.include.members(requiredAttributes)",
									"            attributes.forEach(attr => {",
									"                if (keys.includes(attr)) {",
									"                    hasOneAttribute = true",
									"                    pm.test('Response has ' + attr + ' attribute', function () { pm.expect(jsonData[attr]).to.be.a('array'); });",
									"                }",
									"            })",
									"            if (jsonData[\"searchCriteria\"]) {",
									"                pm.test('Response has searchCriteria attribute', function () { pm.expect(jsonData[\"searchCriteria\"]).to.be.a('object'); })",
									"                hasOneAttribute = true",
									"            }",
									"            pm.expect(hasOneAttribute).to.be.true",
									"        });",
									"",
									"        pm.test('Response has usageConsumption attribute', function () { pm.expect(jsonData[\"usageConsumption\"]).to.be.a('array'); });",
									"",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Usage_Consumption}}queryUsageConsumption/{{IDQUC01}}",
							"host": [
								"{{Usage_Consumption}}queryUsageConsumption"
							],
							"path": [
								"{{IDQUC01}}"
							]
						},
						"description": "This operation search for one of the created QueryUsageConsumption"
					},
					"response": []
				}
			]
		},
		{
			"name": "N2",
			"item": [
				{
					"name": "/QueryUsageConsumption/{{IDQUC01}}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var instance = pm.response.json();\r",
									"\r",
									"\r",
									"var requiredAttributes = ['id', 'href'];\r",
									"\r",
									"pm.test('Instance has all mandatory attributes', function () {\r",
									"    let keys = Object.keys(instance)\r",
									"    pm.expect(keys).to.include.members(requiredAttributes)\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Usage_Consumption}}queryUsageConsumption/{{IDQUC01}}?fields=id",
							"host": [
								"{{Usage_Consumption}}queryUsageConsumption"
							],
							"path": [
								"{{IDQUC01}}"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation search for one of the created QueryUsageConsumption"
					},
					"response": []
				},
				{
					"name": "/QueryUsageConsumption?fields=id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"if (Array.isArray(jsonData) && (jsonData.length > 0)) {\r",
									"    jsonData.forEach(instance => {\r",
									"        var requiredAttributes = ['id', 'href'];\r",
									"\r",
									"        pm.test('Instance has all mandatory attributes', function () {\r",
									"            let keys = Object.keys(instance)\r",
									"            pm.expect(keys).to.include.members(requiredAttributes)\r",
									"\r",
									"        });\r",
									"    })\r",
									"\r",
									"\r",
									"\r",
									"}\r",
									"else {\r",
									"    pm.test('Array expected as response', function () {\r",
									"        pm.expect(Array.isArray(jsonData)).to.be.true\r",
									"    })\r",
									"\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Usage_Consumption}}queryUsageConsumption?fields=id",
							"host": [
								"{{Usage_Consumption}}queryUsageConsumption"
							],
							"query": [
								{
									"key": "fields",
									"value": "id"
								}
							]
						},
						"description": "This operation search for one of the created QueryUsageConsumption"
					},
					"response": []
				}
			]
		},
		{
			"name": "E1",
			"item": [
				{
					"name": "/QueryUsageConsumption/404ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{Usage_Consumption}}queryUsageConsumption/415efb87-16b6-4f7f-97d6-6a21059a70ca",
							"host": [
								"{{Usage_Consumption}}queryUsageConsumption"
							],
							"path": [
								"415efb87-16b6-4f7f-97d6-6a21059a70ca"
							]
						},
						"description": "This operation search for one of the created QueryUsageConsumption"
					},
					"response": []
				}
			]
		}
	]
}